name: Unit Tests

on:
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Flutter Unit Tests
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code from the PR branch
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # 2. Set up Java (Required by Flutter SDK/Android build tools)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Set up Flutter SDK using a community action
      #    This action also handles caching Flutter dependencies efficiently
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      # 4. Install project dependencies
      - name: Install dependencies
        run: flutter pub get

      - name: Create dummy .env file
        run: echo "" > .env # Creates an empty .env file.env

      # 5. (Optional but Recommended) Run static analysis
      - name: Analyze project source
        run: flutter analyze

      # 6. Run unit tests
      - name: Run unit tests
        run: flutter test --machine --coverage > tests.output

      - name: Verify and Show lcov.info content
        if: always() # Run this step even if previous steps fail, for debugging
        run: |
          echo "--- Checking for lcov.info ---"
          ls -la coverage/
          if [ -f "coverage/lcov.info" ]; then
            echo "--- lcov.info content START ---"
            head -n 20 coverage/lcov.info # Print first 20 lines
            echo "--- ... ---"
            tail -n 20 coverage/lcov.info # Print last 20 lines
            echo "--- lcov.info content END ---"
          else
            echo "--- lcov.info NOT FOUND ---"
          fi
          echo "--- Checking for tests.output ---"
          ls -l tests.output
          if [ -f "tests.output" ]; then
            echo "--- tests.output content START ---"
            head -n 20 tests.output
            echo "--- ... ---"
            echo "--- tests.output content END ---"
          else
            echo "--- tests.output NOT FOUND ---"
          fi
        shell: bash

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}