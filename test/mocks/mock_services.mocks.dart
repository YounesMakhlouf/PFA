// Mocks generated by Mockito 5.4.6 from annotations
// in pfa/test/mocks/mock_services.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:pfa/models/enums.dart' as _i8;
import 'package:pfa/services/logging_service.dart' as _i6;
import 'package:pfa/services/settings_service.dart' as _i7;
import 'package:pfa/services/supabase_service.dart' as _i3;
import 'package:supabase_flutter/supabase_flutter.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeSupabaseClient_0 extends _i1.SmartFake
    implements _i2.SupabaseClient {
  _FakeSupabaseClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthResponse_1 extends _i1.SmartFake implements _i2.AuthResponse {
  _FakeAuthResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SupabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSupabaseService extends _i1.Mock implements _i3.SupabaseService {
  MockSupabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.SupabaseClient get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeSupabaseClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.SupabaseClient);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  String getPublicUrl({
    required String? bucketId,
    required String? filePath,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPublicUrl,
          [],
          {
            #bucketId: bucketId,
            #filePath: filePath,
          },
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #getPublicUrl,
            [],
            {
              #bucketId: bucketId,
              #filePath: filePath,
            },
          ),
        ),
      ) as String);

  @override
  _i4.Future<_i2.AuthResponse> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_1(
          this,
          Invocation.method(
            #signUp,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<_i2.AuthResponse> signIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i4.Future<_i2.AuthResponse>.value(_FakeAuthResponse_1(
          this,
          Invocation.method(
            #signIn,
            [],
            {
              #email: email,
              #password: password,
            },
          ),
        )),
      ) as _i4.Future<_i2.AuthResponse>);

  @override
  _i4.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LoggingService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingService extends _i1.Mock implements _i6.LoggingService {
  MockLoggingService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void initialize() => super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug(String? message) => super.noSuchMethod(
        Invocation.method(
          #debug,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info(String? message) => super.noSuchMethod(
        Invocation.method(
          #info,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error(
    String? message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String formatError(
    String? message,
    Object? error,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #formatError,
          [
            message,
            error,
          ],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #formatError,
            [
              message,
              error,
            ],
          ),
        ),
      ) as String);

  @override
  String handleNetworkError(Object? error) => (super.noSuchMethod(
        Invocation.method(
          #handleNetworkError,
          [error],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #handleNetworkError,
            [error],
          ),
        ),
      ) as String);
}

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i7.SettingsService {
  MockSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> setLastActiveChildId(String? childId) => (super.noSuchMethod(
        Invocation.method(
          #setLastActiveChildId,
          [childId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<String?> getLastActiveChildId() => (super.noSuchMethod(
        Invocation.method(
          #getLastActiveChildId,
          [],
        ),
        returnValue: _i4.Future<String?>.value(),
      ) as _i4.Future<String?>);

  @override
  _i4.Future<void> setTtsEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setTtsEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isTtsEnabled({bool? defaultValue = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isTtsEnabled,
          [],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setTtsSpeechRate(double? rate) => (super.noSuchMethod(
        Invocation.method(
          #setTtsSpeechRate,
          [rate],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<double> getTtsSpeechRate({double? defaultValue = 0.5}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTtsSpeechRate,
          [],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);

  @override
  _i4.Future<void> setSoundEffectsEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setSoundEffectsEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> areSoundEffectsEnabled({bool? defaultValue = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #areSoundEffectsEnabled,
          [],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setHapticsEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setHapticsEnabled,
          [enabled],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> areHapticsEnabled({bool? defaultValue = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #areHapticsEnabled,
          [],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> setAppLanguage(_i8.AppLanguage? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #setAppLanguage,
          [language],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i8.AppLanguage> getAppLanguage(
          {_i8.AppLanguage? defaultValue = _i8.AppLanguage.arabic}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAppLanguage,
          [],
          {#defaultValue: defaultValue},
        ),
        returnValue: _i4.Future<_i8.AppLanguage>.value(_i8.AppLanguage.english),
      ) as _i4.Future<_i8.AppLanguage>);

  @override
  _i4.Future<void> clearAllAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #clearAllAppSettings,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
