@startuml

' Basic styling for clarity
skinparam classAttributeIconSize 0
hide empty members
skinparam shadowing false
skinparam defaultFontName Segoe UI
skinparam class {
    BackgroundColor PaleTurquoise
    ArrowColor Navy
    BorderColor Navy
}
skinparam enum {
    BackgroundColor LightYellow
    ArrowColor Olive
    BorderColor Olive
}
skinparam abstract {
    BackgroundColor LightGray
}
skinparam note {
    BackgroundColor LightGrey
    BorderColor Grey
}

' --- Enumerations ---

enum SpecialCondition {
  AUTISM
  ADHD
  DYSLEXIA
  DYSCALCULIA
  SPEAKING_DIFFICULTIES
}

enum GameCategory {
  LOGICAL_THINKING
  EDUCATION
  RELAXATION
  EMOTIONS
  NUMBERS
  COLORS_SHAPES
  ANIMALS
  FRUITS_VEGETABLES
}

enum GameType {
  MULTIPLE_CHOICE
  MEMORY_MATCH
  PUZZLE
  STORY
  IDENTIFY_INTRUDER
}

' --- User Hierarchy ---

class Educator extends Account {
  + speciality: String
}

class Account {
  + accountId: UUID  ' This is auth.users.id
  + email: String
  ' password handled by Supabase Auth
  + createdAt: Timestamp
}
note top of Account : Represents the Parent/Educator's login account.\nManaged by Supabase Auth.

class Child {
  + childId: UUID ' PK for child profile
  + accountId: UUID ' FK to Account (auth.users.id)
  + firstName: String
  + lastName: String {nullable}
  + birthdate: Date {nullable}
  + avatarUrl: String {nullable} ' Path in storage or full URL
  + specialConditions: SpecialCondition[] {nullable}
  + createdAt: Timestamp
  + updatedAt: Timestamp
  --
  + get fullName(): String
  + get age(): Int {nullable}
}


' --- Game Structure ---

class Game {
  + gameId: UUID
  + name: String
  + pictureUrl: URL
  + instruction: String
  + category: GameCategory
  + type: GameType
  --
  + getLevels(): Level[]
}

class Level {
  + levelId: UUID
  + levelNumber: Int
  + description: String {nullable}
  --
  + getScreens(): Screen[]
}

abstract class Screen {
  + screenId: UUID
  + screenNumber: Int
  + type: ScreenType
  + instruction: String {nullable}
  --
  + {abstract} getOptions(): Option[]
}

class MultipleChoiceScreen extends Screen {
  --
  + getOptions(): Option[]
  + checkAnswer(selectedOptions: Option[]): Boolean
}

class MemoryScreen extends Screen {
  --
  + getOptions(): Option[]
  + checkAnswer(selectedOptions: Option[]): Boolean
}
note top of MemoryScreen
  Presents pairs of options identified by
  a common `pairId`. Player needs to select
  two options with the same `pairId`.
end note

class Option {
  + optionId: UUID
  + labelText: String {nullable}
  + picturePath: String {nullable} ' Path in Supabase Storage
  + audioPath: String {nullable} ' Path in Supabase Storage
  + isCorrect: Boolean ' For multiple choice
  + pairId: UUID {nullable} ' Identifier to link pairs in Memory games
}
note bottom of Option
  Represents a clickable choice or item
  presented on a screen. `pairId` is used for
  Memory games to identify matching items.
end note

' --- Progress Tracking ---

class GameSession {
  + sessionId: UUID
  + startTime: Timestamp
  + endTime: Timestamp {nullable}
  + completed: Boolean
  + totalAttempts: Int
  + correctAttempts: Int
}

class ScreenAttempt {
  + attemptId: UUID
  + timestamp: Timestamp
  + isCorrect: Boolean
  + timeTakenMs: Int
  + hintsUsed: Int
}


' --- Relationships ---
Account "1" -- "0..*" Child : manages >
Educator "1" -- "0..*" Game : creates

' Game Structure Relationships
Game "1" *-- "1..*" Level
Level "1" *-- "1..*" Screen
Screen "1" o-- "1..*" Option

MultipleChoiceScreen "1" -- "1..*" Option : identifies correct >

' Progress Tracking Relationships
Child "1" -- "0..*" GameSession : plays >
Game "1" -- "0..*" GameSession : records sessions for >
GameSession "1" *-- "1..*" ScreenAttempt : >
Screen "1" -- "0..*" ScreenAttempt : attempted on >
Option "1" -- "0..*" ScreenAttempt : selected in >

@enduml